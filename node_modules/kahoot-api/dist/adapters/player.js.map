{"version":3,"sources":["../../src/adapters/player.js"],"names":["Player","socket","playerBound","Error","cid","name","quiz","Quiz","pointsData","loggedIn","timeouts","code","send","id","Events","submitTwoFactorAuth","type","content","JSON","stringify","sequence","combinations","forEach","combi","index","timeout","setTimeout","twoFactorLogin","splice","indexOf","length","push","clearTimeout","twoFactor","info","twoFactorAuth","deviceInfo","participantUserId","device","userAgent","screen","width","height","Promise","resolve","rejects","on","res","data","error","description","once","statusRes","statusData","status","playerRes","playerData","resetTwoFactorAuth","stopBruteForce","bruteForceTwoFactor","twoFactorAuthCorrect","userNameAccepted","then","initListeners","members","joinTeamMembers","choice","questionIndex","meta","lag","gameBlockAnswer","disconnect","message","parsedContent","parse","emit","startQuiz","quizName","getReady","Adapter"],"mappings":"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","sourcesContent":["import Quiz from '../quiz';\nimport Adapter from './adapter';\nimport Events from '../events';\n\n/**\n * The player adapter, used for connecting to a game\n *\n * @export\n * @class Player\n * @extends {Adapter}\n */\nexport default class Player extends Adapter {\n  /**\n   * Creates an instance of Player.\n   *\n   * @param {CometD} socket\n   * @memberof Player\n   */\n  constructor(socket) {\n    super(socket);\n    if (socket.playerBound) {\n      throw new Error('Socket can only be used for one player');\n    }\n\n    this.cid = '';\n    this.name = '';\n    this.quiz = new Quiz();\n    this.pointsData = {};\n    this.loggedIn = false;\n    this.timeouts = [];\n\n    this.socket = socket;\n    this.socket.playerBound = this;\n  }\n\n\n  /**\n   * Attempt two factor login with specified code\n   *\n   * @param {String} code\n   * @returns {Promise}\n   * @memberof Player\n   */\n  twoFactorLogin(code) {\n    return this.send('/service/controller', {\n      id: Events.submitTwoFactorAuth,\n      type: 'message',\n      content: JSON.stringify({\n        sequence: code,\n      }),\n    });\n  }\n\n  /**\n   * Tries all combinations of 2FA codes\n   */\n  bruteForceTwoFactor() {\n    const combinations = [\n      '0123',\n      '0132',\n      '0213',\n      '0231',\n      '0321',\n      '0312',\n      '1023',\n      '1032',\n      '1203',\n      '1230',\n      '1302',\n      '1320',\n      '2013',\n      '2031',\n      '2103',\n      '2130',\n      '2301',\n      '2310',\n      '3012',\n      '3021',\n      '3102',\n      '3120',\n      '3201',\n      '3210',\n    ];\n    combinations.forEach((combi, index) => {\n      const timeout = setTimeout(() => {\n        if (!this.loggedIn) {\n          this.twoFactorLogin(combi);\n        }\n\n        this.timeouts.splice(this.timeouts.indexOf(timeout), 1);\n      }, index * (1000 / combinations.length));\n\n      this.timeouts.push(timeout);\n    });\n  }\n\n  /**\n   * Stop the current brute force attempt\n   */\n  stopBruteForce() {\n    this.timeouts.forEach((timeout, index) => {\n      clearTimeout(timeout);\n      this.timeouts.splice(index, 1);\n    });\n  }\n\n  /**\n   * Join the game\n   *\n   * @param {String} name\n   * @returns {Promise}\n   * @memberof Player\n   */\n  join(name) {\n    const twoFactor = this.socket.info.twoFactorAuth;\n    const deviceInfo = { participantUserId: null, device: { userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36', screen: { width: 1920, height: 1080 } } };\n\n    return new Promise((resolve, rejects) => {\n      this.on('controller', (res) => {\n        const { data } = res;\n        if (data.type === 'loginResponse') {\n          if (data.error) rejects(new Error(data.description));\n\n          this.cid = data.cid;\n          if (!twoFactor) {\n            this.loggedIn = true;\n            resolve();\n          }\n        }\n      });\n\n      if (twoFactor) {\n        this.once('status', (statusRes) => {\n          const statusData = statusRes.data;\n          const { status } = statusData;\n          if (status === 'ACTIVE') {\n            this.on('player', (playerRes) => {\n              const playerData = playerRes.data;\n              const { id } = playerData;\n\n              if (id === Events.resetTwoFactorAuth && !this.loggedIn) {\n                this.stopBruteForce();\n                this.bruteForceTwoFactor();\n              }\n\n              if (id === Events.twoFactorAuthCorrect) {\n                this.loggedIn = true;\n                this.stopBruteForce();\n                resolve();\n              }\n\n              if (id === Events.userNameAccepted) {\n                this.bruteForceTwoFactor();\n              }\n            });\n          } else {\n            rejects(new Error(`Status not active: ${status}`));\n          }\n        });\n      }\n\n      this.send('/service/controller', {\n        content: JSON.stringify(deviceInfo),\n        name,\n        type: 'login',\n        status: 'VERIFIED',\n      });\n    }).then(() => { this.name = name; }).then(this.initListeners());\n  }\n\n  /**\n   * Add members to current team, join sets team name in team mode\n   *\n   * @param {Array<String>} [members=[]] - Names of team members\n   * @returns {Promise}\n   * @memberof Player\n   */\n  team(members = []) {\n    return this.send('/service/controller', {\n      content: JSON.stringify(members),\n      id: Events.joinTeamMembers,\n      type: 'message',\n    });\n  }\n\n  /**\n   * Answer a question\n   *\n   * @param {Number} choice - 0 - 3\n   * @returns {Promise}\n   * @memberof Player\n   */\n  answer(choice) {\n    const content = {\n      choice, questionIndex: 0, type: 'quiz', meta: { lag: 50 },\n    };\n\n    return this.send('/service/controller', {\n      content: JSON.stringify(content),\n      id: Events.gameBlockAnswer,\n      type: 'message',\n    });\n  }\n\n  /**\n   * Leave the game and disconnect socket\n   */\n  leave() {\n    this.stopBruteForce();\n    this.socket.playerBound = false;\n    this.send('/service/controller', {\n      cid: this.cid,\n      type: 'left',\n    });\n    const disconnect = new Promise((resolve) => this.socket.disconnect(resolve));\n    return disconnect;\n  }\n\n  initListeners() {\n    this.on('player', (message) => {\n      const { data } = message;\n      const { type } = data;\n\n      switch (type) {\n        case 'message': {\n          const { id, content } = data;\n          const parsedContent = content ? JSON.parse(content) : '';\n\n          this.emit('message', {\n            id,\n            content: parsedContent,\n          });\n          break;\n        }\n\n        default: {\n          break;\n        }\n      }\n    });\n\n    this.on('message', (message) => {\n      switch (message.id) {\n        case Events.startQuiz: {\n          const { quizName } = message.content;\n          this.quiz.name = quizName;\n          break;\n        }\n        case Events.getReady: {\n          const { questionIndex } = message.content;\n          this.quiz.questionIndex = questionIndex;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    });\n  }\n}\n"],"file":"player.js"}