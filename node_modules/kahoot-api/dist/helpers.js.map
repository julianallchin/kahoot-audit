{"version":3,"sources":["../src/helpers.js"],"names":["Helpers","Date","getTime","base64","Buffer","from","toString","challenge","patch","no","_","replace","patched","eval","rawToken","session","String","fromCharCode","final","token","atob","i","length","tokenChar","charCodeAt","charCode","Math","floor","random"],"mappings":"6XAKqBA,O,+JAQL,CACZ,MAAO,IAAIC,CAAAA,IAAJ,GAAWC,OAAX,EACR,C,kCAWWC,C,CAAQ,CAClB,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYF,CAAZ,CAAoB,QAApB,EAA8BG,QAA9B,CAAuC,QAAvC,CACR,C,oCAUYC,S,CAAW,IAChBC,CAAAA,KAAK,CAAG,8BADQ,CAGhBC,EAAE,CAAG,oBAHW,CAIhBC,CAAC,CAAG,EAJY,CAKtBA,CAAC,CAACC,OAAF,CAAYA,eALU,CAOtB,GAAMC,CAAAA,OAAO,CAAGL,SAAS,CAACI,OAAV,CAAkBH,KAAlB,CAAyB,OAAzB,CAAhB,CAGA,MAAOK,CAAAA,IAAI,CAACD,OAAD,CACZ,C,4CAWgBE,C,CAAUC,C,CAAS,CAIlC,UAKWC,MAAM,CAACC,YALlB,CAHIC,CAAK,CAAG,EAGZ,CAFMC,CAAK,CAAG,KAAKC,IAAL,CAAUN,CAAV,CAEd,CAASO,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,CAAK,CAACG,MAA1B,CAAkCD,CAAC,EAAI,CAAvC,CAA0C,IAClCE,CAAAA,CAAS,CAAGJ,CAAK,CAACK,UAAN,CAAiBH,CAAjB,CADsB,CAElCI,CAAQ,CAAGV,CAAO,CAACS,UAAR,CAAmBH,CAAC,CAAGN,CAAO,CAACO,MAA/B,CAFuB,CAKxCJ,CAAK,EAAI,EADOK,CAAS,CAAGE,CACnB,CACV,CAED,MAAOP,CAAAA,CACR,C,iCASY,CAEX,UACWQ,IAAI,CAACC,KADhB,CADIT,CAAK,CAAG,EACZ,CAASG,CAAC,CAAG,CAAb,CAAoB,CAAJ,CAAAA,CAAhB,CAAuBA,CAAC,EAAI,CAA5B,CACEH,CAAK,EAAI,EAA2B,CAAhB,CAAAQ,IAAI,CAACE,MAAL,EAAX,EAAgC,CAAzC,CAEF,MAAOV,CAAAA,CACR,C","sourcesContent":["import { replace } from 'lodash';\n\n/**\n * Contains functions commonly used in login\n */\nexport default class Helpers {\n  /**\n   * Get unix time\n   *\n   * @static\n   * @returns {Number} - Time\n   * @memberof Helpers\n   */\n  static time() {\n    return new Date().getTime();\n  }\n\n\n  /**\n   * Convert base64 to ascii\n   *\n   * @static\n   * @param {String} base64\n   * @returns {String} - Decoded value\n   * @memberof Helpers\n   */\n  static atob(base64) {\n    return Buffer.from(base64, 'base64').toString('binary');\n  }\n\n  /**\n   * Solves kahoot challenge\n   *\n   * @static\n   * @param {String} challenge\n   * @returns {String} - Solved challenge\n   * @memberof Helpers\n   */\n  static solve(challenge) {\n    const patch = /(if\\()(.*)(this)(.+?(?=\\())/g;\n    // eslint-disable-next-line no-unused-vars\n    const no = () => false;\n    const _ = {};\n    _.replace = replace;\n\n    const patched = challenge.replace(patch, 'if(no');\n\n    // eslint-disable-next-line no-eval\n    return eval(patched);\n  }\n\n  /**\n   * Shifts the token and session bits (magic)\n   *\n   * @static\n   * @param {String} rawToken\n   * @param {String} session\n   * @returns {String}\n   * @memberof Helpers\n   */\n  static shiftBits(rawToken, session) {\n    let final = '';\n    const token = this.atob(rawToken);\n\n    for (let i = 0; i < token.length; i += 1) {\n      const tokenChar = token.charCodeAt(i);\n      const charCode = session.charCodeAt(i % session.length);\n      // eslint-disable-next-line no-bitwise\n      const shifted = tokenChar ^ charCode;\n      final += String.fromCharCode(shifted);\n    }\n\n    return final;\n  }\n\n  /**\n   * Get a random valid cid (unique id)\n   *\n   * @static\n   * @returns {String}\n   * @memberof Helpers\n   */\n  static cid() {\n    let final = '';\n    for (let i = 0; i < 9; i += 1) {\n      final += Math.floor(Math.random() * 9) + 1;\n    }\n    return final;\n  }\n}\n"],"file":"helpers.js"}